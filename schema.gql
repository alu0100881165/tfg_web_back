# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  """Identifier"""
  id: Float!

  """Username"""
  username: String!

  """Email"""
  email: String!

  """Roles"""
  roles: [Role!]!

  """Name"""
  firstname: String!

  """Lastname"""
  lastname: String!

  """Associated company"""
  company: CompanyModel!
}

enum Role {
  BaseUser
  Admin
}

type CompanyModel {
  """Identifier"""
  id: Float!

  """Company name"""
  name: String!

  """Company address"""
  address: String!

  """Company postal code"""
  postalCode: String!

  """Contact phone"""
  phone: String!
}

type LoginResponse {
  accessToken: String!
  user: UserModel!
}

type LogoutResponse {
  username: String!
}

type CounterModel {
  """Identifier"""
  id: Float!

  """Username"""
  username: String!

  """Software Version"""
  currentVersion: String!

  """Associated company"""
  company: CompanyModel!
}

type RegisterCounterResponse {
  counter: CounterModel!
}

type Query {
  findAll: [UserModel!]!
  findCompanyUsers(companyId: Float!): [UserModel!]!
  me: UserModel
  findAllCompanies: [CompanyModel!]!
  findCompany(id: Float!): CompanyModel!
  findCompanyByName(name: String!): CompanyModel!
  findAllCounters: [CounterModel!]!
}

type Mutation {
  register(companyId: Float!, lastname: String!, firstname: String!, password: String!, email: String!, username: String!): LoginResponse!
  registerAdmin(companyId: Float!, lastname: String!, firstname: String!, password: String!, email: String!, username: String!): LoginResponse!
  login(password: String!, username: String!): LoginResponse!
  logout: LogoutResponse!
  update(newLastname: String, newFirstname: String, newEmail: String, newUsername: String, username: String!): UserModel!
  delete(userId: String!): UserModel!
  createCompany(phone: String!, postalCode: String!, address: String!, name: String!): CompanyModel!
  updateCompany(newPhone: String, newPostalCode: String, newAddress: String, newName: String, name: String!): CompanyModel!
  deleteCompany(id: Float!): CompanyModel!
  createCounter(companyId: Float!, currentVersion: String!, password: String!, username: String!): RegisterCounterResponse!
}
